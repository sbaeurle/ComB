# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: detection.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class Empty(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Frame(betterproto.Message):
    image: bytes = betterproto.bytes_field(1)
    timestamp: int = betterproto.uint64_field(2)
    frame_number: int = betterproto.uint64_field(3)


class ObjectDetectionStub(betterproto.ServiceStub):
    async def detect_objects(
        self, *, image: bytes = b"", timestamp: int = 0, frame_number: int = 0
    ) -> "Empty":

        request = Frame()
        request.image = image
        request.timestamp = timestamp
        request.frame_number = frame_number

        return await self._unary_unary(
            "/detection.ObjectDetection/DetectObjects", request, Empty
        )


class ObjectDetectionBase(ServiceBase):
    async def detect_objects(
        self, image: bytes, timestamp: int, frame_number: int
    ) -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_detect_objects(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "image": request.image,
            "timestamp": request.timestamp,
            "frame_number": request.frame_number,
        }

        response = await self.detect_objects(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/detection.ObjectDetection/DetectObjects": grpclib.const.Handler(
                self.__rpc_detect_objects,
                grpclib.const.Cardinality.UNARY_UNARY,
                Frame,
                Empty,
            ),
        }
